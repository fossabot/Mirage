//! Tegra210 Memory Controller implementation
//!
//! # Description
//!
//! Tegra X1 devices feature two Memory Controllers and two External
//! Memory Controllers, one set per channel.
//!
//! The Tegra X1 memory controller (MC) handles memory requests from
//! internal clients and arbitrates among them to allocate memory
//! bandwidth for DDR3L, LPDDR3, and LPDDR4 SDRAMs. The external
//! memory controller (EMC) communicates with external DDR3L,
//! LPDDR3, and LPDDR4 devices.

use register::mmio::ReadWrite;

use crate::{clock, timer::usleep};

/// Base address for the MC registers.
const MC_BASE: u32 = 0x7001_9000;

register!(IRAM_BOM, MC_BASE + 0x65C);

register!(IRAM_TOM, MC_BASE + 0x660);

register!(SEC_CARVEOUT_BOM, MC_BASE + 0x670);

register!(SEC_CARVEOUT_SIZE_MB, MC_BASE + 0x674);

register!(SEC_CARVEOUT_REG_CTRL, MC_BASE + 0x678);

register!(VIDEO_PROTECT_GPU_OVERRIDE_0, MC_BASE + 0x984);

register!(VIDEO_PROTECT_GPU_OVERRIDE_1, MC_BASE + 0x988);

register!(VIDEO_PROTECT_BOM, MC_BASE + 0x648);

register!(VIDEO_PROTECT_SIZE_MB, MC_BASE + 0x64C);

register!(VIDEO_PROTECT_REG_CTRL, MC_BASE + 0x650);

register!(MTS_CARVEOUT_BOM, MC_BASE + 0x9A0);

register!(MTS_CARVEOUT_SIZE_MB, MC_BASE + 0x9A4);

register!(MTS_CARVEOUT_ADR_HI, MC_BASE + 0x9A8);

register!(MTS_CARVEOUT_REG_CTRL, MC_BASE + 0x9ac);

register!(SECURITY_CARVEOUT1_BOM, MC_BASE + 0xC0C);

register!(SECURITY_CARVEOUT1_BOM_HI, MC_BASE + 0xC10);

register!(SECURITY_CARVEOUT1_SIZE_128KB, MC_BASE + 0xC14);

register!(SECURITY_CARVEOUT1_CLIENT_ACCESS0, MC_BASE + 0xC18);

register!(SECURITY_CARVEOUT1_CLIENT_ACCESS1, MC_BASE + 0xC1C);

register!(SECURITY_CARVEOUT1_CLIENT_ACCESS2, MC_BASE + 0xC20);

register!(SECURITY_CARVEOUT1_CLIENT_ACCESS3, MC_BASE + 0xC24);

register!(SECURITY_CARVEOUT1_CLIENT_ACCESS4, MC_BASE + 0xC28);

register!(
    SECURITY_CARVEOUT1_CLIENT_FORCE_INTERNAL_ACCESS0,
    MC_BASE + 0xC2C
);

register!(
    SECURITY_CARVEOUT1_CLIENT_FORCE_INTERNAL_ACCESS1,
    MC_BASE + 0xC30
);

register!(
    SECURITY_CARVEOUT1_CLIENT_FORCE_INTERNAL_ACCESS2,
    MC_BASE + 0xC34
);

register!(
    SECURITY_CARVEOUT1_CLIENT_FORCE_INTERNAL_ACCESS3,
    MC_BASE + 0xC38
);

register!(
    SECURITY_CARVEOUT1_CLIENT_FORCE_INTERNAL_ACCESS4,
    MC_BASE + 0xC3C
);

register!(SECURITY_CARVEOUT1_CFG0, MC_BASE + 0xC08);

register!(SECURITY_CARVEOUT2_BOM, MC_BASE + 0xC5C);

register!(SECURITY_CARVEOUT2_BOM_HI, MC_BASE + 0xC60);

register!(SECURITY_CARVEOUT2_SIZE_128KB, MC_BASE + 0xC64);

register!(SECURITY_CARVEOUT2_CLIENT_ACCESS0, MC_BASE + 0xC68);

register!(SECURITY_CARVEOUT2_CLIENT_ACCESS1, MC_BASE + 0xC6C);

register!(SECURITY_CARVEOUT2_CLIENT_ACCESS2, MC_BASE + 0xC70);

register!(SECURITY_CARVEOUT2_CLIENT_ACCESS3, MC_BASE + 0xC74);

register!(SECURITY_CARVEOUT2_CLIENT_ACCESS4, MC_BASE + 0xC78);

register!(
    SECURITY_CARVEOUT2_CLIENT_FORCE_INTERNAL_ACCESS0,
    MC_BASE + 0xC7C
);

register!(
    SECURITY_CARVEOUT2_CLIENT_FORCE_INTERNAL_ACCESS1,
    MC_BASE + 0xC80
);

register!(
    SECURITY_CARVEOUT2_CLIENT_FORCE_INTERNAL_ACCESS2,
    MC_BASE + 0xC84
);

register!(
    SECURITY_CARVEOUT2_CLIENT_FORCE_INTERNAL_ACCESS3,
    MC_BASE + 0xC88
);

register!(
    SECURITY_CARVEOUT2_CLIENT_FORCE_INTERNAL_ACCESS4,
    MC_BASE + 0xC8C
);

register!(SECURITY_CARVEOUT2_CFG0, MC_BASE + 0xC58);

register!(SECURITY_CARVEOUT3_BOM, MC_BASE + 0xCAC);

register!(SECURITY_CARVEOUT3_BOM_HI, MC_BASE + 0xCB0);

register!(SECURITY_CARVEOUT3_SIZE_128KB, MC_BASE + 0xCB4);

register!(SECURITY_CARVEOUT3_CLIENT_ACCESS0, MC_BASE + 0xCB8);

register!(SECURITY_CARVEOUT3_CLIENT_ACCESS1, MC_BASE + 0xCBC);

register!(SECURITY_CARVEOUT3_CLIENT_ACCESS2, MC_BASE + 0xCC0);

register!(SECURITY_CARVEOUT3_CLIENT_ACCESS3, MC_BASE + 0xCC4);

register!(SECURITY_CARVEOUT3_CLIENT_ACCESS4, MC_BASE + 0xCC8);

register!(
    SECURITY_CARVEOUT3_CLIENT_FORCE_INTERNAL_ACCESS0,
    MC_BASE + 0xCCC
);

register!(
    SECURITY_CARVEOUT3_CLIENT_FORCE_INTERNAL_ACCESS1,
    MC_BASE + 0xCD0
);

register!(
    SECURITY_CARVEOUT3_CLIENT_FORCE_INTERNAL_ACCESS2,
    MC_BASE + 0xCD4
);

register!(
    SECURITY_CARVEOUT3_CLIENT_FORCE_INTERNAL_ACCESS3,
    MC_BASE + 0xCD8
);

register!(
    SECURITY_CARVEOUT3_CLIENT_FORCE_INTERNAL_ACCESS4,
    MC_BASE + 0xCDC
);

register!(SECURITY_CARVEOUT3_CFG0, MC_BASE + 0xCA8);

register!(SECURITY_CARVEOUT4_BOM, MC_BASE + 0xCFC);

register!(SECURITY_CARVEOUT4_BOM_HI, MC_BASE + 0xD00);

register!(SECURITY_CARVEOUT4_SIZE_128KB, MC_BASE + 0xD04);

register!(SECURITY_CARVEOUT4_CLIENT_ACCESS0, MC_BASE + 0xD08);

register!(SECURITY_CARVEOUT4_CLIENT_ACCESS1, MC_BASE + 0xD0C);

register!(SECURITY_CARVEOUT4_CLIENT_ACCESS2, MC_BASE + 0xD10);

register!(SECURITY_CARVEOUT4_CLIENT_ACCESS3, MC_BASE + 0xD14);

register!(SECURITY_CARVEOUT4_CLIENT_ACCESS4, MC_BASE + 0xD18);

register!(
    SECURITY_CARVEOUT4_CLIENT_FORCE_INTERNAL_ACCESS0,
    MC_BASE + 0xD1C
);

register!(
    SECURITY_CARVEOUT4_CLIENT_FORCE_INTERNAL_ACCESS1,
    MC_BASE + 0xD20
);

register!(
    SECURITY_CARVEOUT4_CLIENT_FORCE_INTERNAL_ACCESS2,
    MC_BASE + 0xD24
);

register!(
    SECURITY_CARVEOUT4_CLIENT_FORCE_INTERNAL_ACCESS3,
    MC_BASE + 0xD28
);

register!(
    SECURITY_CARVEOUT4_CLIENT_FORCE_INTERNAL_ACCESS4,
    MC_BASE + 0xD2C
);

register!(SECURITY_CARVEOUT4_CFG0, MC_BASE + 0xCF8);

register!(SECURITY_CARVEOUT5_BOM, MC_BASE + 0xD4C);

register!(SECURITY_CARVEOUT5_BOM_HI, MC_BASE + 0xD50);

register!(SECURITY_CARVEOUT5_SIZE_128KB, MC_BASE + 0xD54);

register!(SECURITY_CARVEOUT5_CLIENT_ACCESS0, MC_BASE + 0xD58);

register!(SECURITY_CARVEOUT5_CLIENT_ACCESS1, MC_BASE + 0xD5C);

register!(SECURITY_CARVEOUT5_CLIENT_ACCESS2, MC_BASE + 0xD60);

register!(SECURITY_CARVEOUT5_CLIENT_ACCESS3, MC_BASE + 0xD64);

register!(SECURITY_CARVEOUT5_CLIENT_ACCESS4, MC_BASE + 0xD68);

register!(
    SECURITY_CARVEOUT5_CLIENT_FORCE_INTERNAL_ACCESS0,
    MC_BASE + 0xD6C
);

register!(
    SECURITY_CARVEOUT5_CLIENT_FORCE_INTERNAL_ACCESS1,
    MC_BASE + 0xD70
);

register!(
    SECURITY_CARVEOUT5_CLIENT_FORCE_INTERNAL_ACCESS2,
    MC_BASE + 0xD74
);

register!(
    SECURITY_CARVEOUT5_CLIENT_FORCE_INTERNAL_ACCESS3,
    MC_BASE + 0xD78
);

register!(
    SECURITY_CARVEOUT5_CLIENT_FORCE_INTERNAL_ACCESS4,
    MC_BASE + 0xD7C
);

register!(SECURITY_CARVEOUT5_CFG0, MC_BASE + 0xD48);

pub fn config_tsec_carveout(bom: u32, size_mb: u32, lock: bool) {
    SEC_CARVEOUT_BOM.set(bom);
    SEC_CARVEOUT_SIZE_MB.set(size_mb);

    if lock {
        SEC_CARVEOUT_REG_CTRL.set(1);
    }
}

pub fn config_carveout() {
    unsafe {
        (*(0x8005_FFFC as *const ReadWrite<u32>)).set(0xC0ED_BBCC);
    }

    VIDEO_PROTECT_GPU_OVERRIDE_0.set(1);
    VIDEO_PROTECT_GPU_OVERRIDE_1.set(0);
    VIDEO_PROTECT_BOM.set(0);
    VIDEO_PROTECT_SIZE_MB.set(0);
    VIDEO_PROTECT_REG_CTRL.set(1);

    config_tsec_carveout(0, 0, true);

    MTS_CARVEOUT_BOM.set(0);
    MTS_CARVEOUT_SIZE_MB.set(0);
    MTS_CARVEOUT_ADR_HI.set(0);
    MTS_CARVEOUT_REG_CTRL.set(1);

    SECURITY_CARVEOUT1_BOM.set(0);
    SECURITY_CARVEOUT1_BOM_HI.set(0);
    SECURITY_CARVEOUT1_SIZE_128KB.set(0);
    SECURITY_CARVEOUT1_CLIENT_ACCESS0.set(0);
    SECURITY_CARVEOUT1_CLIENT_ACCESS1.set(0);
    SECURITY_CARVEOUT1_CLIENT_ACCESS2.set(0);
    SECURITY_CARVEOUT1_CLIENT_ACCESS3.set(0);
    SECURITY_CARVEOUT1_CLIENT_ACCESS4.set(0);
    SECURITY_CARVEOUT1_CLIENT_FORCE_INTERNAL_ACCESS0.set(0);
    SECURITY_CARVEOUT1_CLIENT_FORCE_INTERNAL_ACCESS1.set(0);
    SECURITY_CARVEOUT1_CLIENT_FORCE_INTERNAL_ACCESS2.set(0);
    SECURITY_CARVEOUT1_CLIENT_FORCE_INTERNAL_ACCESS3.set(0);
    SECURITY_CARVEOUT1_CLIENT_FORCE_INTERNAL_ACCESS4.set(0);
    SECURITY_CARVEOUT1_CFG0.set(0x4000006);

    SECURITY_CARVEOUT3_BOM.set(0);
    SECURITY_CARVEOUT3_BOM_HI.set(0);
    SECURITY_CARVEOUT3_SIZE_128KB.set(0);
    SECURITY_CARVEOUT3_CLIENT_ACCESS0.set(0);
    SECURITY_CARVEOUT3_CLIENT_ACCESS1.set(0);
    SECURITY_CARVEOUT3_CLIENT_ACCESS2.set(0x3000000);
    SECURITY_CARVEOUT3_CLIENT_ACCESS3.set(0);
    SECURITY_CARVEOUT3_CLIENT_ACCESS4.set(0x300);
    SECURITY_CARVEOUT3_CLIENT_FORCE_INTERNAL_ACCESS0.set(0);
    SECURITY_CARVEOUT3_CLIENT_FORCE_INTERNAL_ACCESS1.set(0);
    SECURITY_CARVEOUT3_CLIENT_FORCE_INTERNAL_ACCESS2.set(0);
    SECURITY_CARVEOUT3_CLIENT_FORCE_INTERNAL_ACCESS3.set(0);
    SECURITY_CARVEOUT3_CLIENT_FORCE_INTERNAL_ACCESS4.set(0);
    SECURITY_CARVEOUT3_CFG0.set(0x4401E7E);

    SECURITY_CARVEOUT4_BOM.set(0);
    SECURITY_CARVEOUT4_BOM_HI.set(0);
    SECURITY_CARVEOUT4_SIZE_128KB.set(0);
    SECURITY_CARVEOUT4_CLIENT_ACCESS0.set(0);
    SECURITY_CARVEOUT4_CLIENT_ACCESS1.set(0);
    SECURITY_CARVEOUT4_CLIENT_ACCESS2.set(0);
    SECURITY_CARVEOUT4_CLIENT_ACCESS3.set(0);
    SECURITY_CARVEOUT4_CLIENT_ACCESS4.set(0);
    SECURITY_CARVEOUT4_CLIENT_FORCE_INTERNAL_ACCESS0.set(0);
    SECURITY_CARVEOUT4_CLIENT_FORCE_INTERNAL_ACCESS1.set(0);
    SECURITY_CARVEOUT4_CLIENT_FORCE_INTERNAL_ACCESS2.set(0);
    SECURITY_CARVEOUT4_CLIENT_FORCE_INTERNAL_ACCESS3.set(0);
    SECURITY_CARVEOUT4_CLIENT_FORCE_INTERNAL_ACCESS4.set(0);
    SECURITY_CARVEOUT4_CFG0.set(0x8F);

    SECURITY_CARVEOUT5_BOM.set(0);
    SECURITY_CARVEOUT5_BOM_HI.set(0);
    SECURITY_CARVEOUT5_SIZE_128KB.set(0);
    SECURITY_CARVEOUT5_CLIENT_ACCESS0.set(0);
    SECURITY_CARVEOUT5_CLIENT_ACCESS1.set(0);
    SECURITY_CARVEOUT5_CLIENT_ACCESS2.set(0);
    SECURITY_CARVEOUT5_CLIENT_ACCESS3.set(0);
    SECURITY_CARVEOUT5_CLIENT_ACCESS4.set(0);
    SECURITY_CARVEOUT5_CLIENT_FORCE_INTERNAL_ACCESS0.set(0);
    SECURITY_CARVEOUT5_CLIENT_FORCE_INTERNAL_ACCESS1.set(0);
    SECURITY_CARVEOUT5_CLIENT_FORCE_INTERNAL_ACCESS2.set(0);
    SECURITY_CARVEOUT5_CLIENT_FORCE_INTERNAL_ACCESS3.set(0);
    SECURITY_CARVEOUT5_CLIENT_FORCE_INTERNAL_ACCESS4.set(0);
    SECURITY_CARVEOUT5_CFG0.set(0x8F);
}

pub fn config_carveout_finalize() {
    SECURITY_CARVEOUT2_BOM.set(0x8002_0000);
    SECURITY_CARVEOUT2_BOM_HI.set(0);
    SECURITY_CARVEOUT2_SIZE_128KB.set(2);
    SECURITY_CARVEOUT2_CLIENT_ACCESS0.set(0);
    SECURITY_CARVEOUT2_CLIENT_ACCESS1.set(0);
    SECURITY_CARVEOUT2_CLIENT_ACCESS2.set(0x3000000);
    SECURITY_CARVEOUT2_CLIENT_ACCESS3.set(0);
    SECURITY_CARVEOUT2_CLIENT_ACCESS4.set(0x300);
    SECURITY_CARVEOUT2_CLIENT_FORCE_INTERNAL_ACCESS0.set(0);
    SECURITY_CARVEOUT2_CLIENT_FORCE_INTERNAL_ACCESS1.set(0);
    SECURITY_CARVEOUT2_CLIENT_FORCE_INTERNAL_ACCESS2.set(0);
    SECURITY_CARVEOUT2_CLIENT_FORCE_INTERNAL_ACCESS3.set(0);
    SECURITY_CARVEOUT2_CLIENT_FORCE_INTERNAL_ACCESS4.set(0);
    SECURITY_CARVEOUT2_CFG0.set(0x440167E);
}

pub fn enable_ahb_redirect() {
    let car = &clock::Car::new();

    car.lvl2_clk_gate_ovrd
        .set((car.lvl2_clk_gate_ovrd.get() & 0xFFF7_FFFF) | 0x80000);

    IRAM_BOM.set(0x4000_0000);
    IRAM_TOM.set(0x4003_F000);
}

pub fn disable_ahb_redirect() {
    let car = &clock::Car::new();

    IRAM_BOM.set(0xFFFF_F000);
    IRAM_TOM.set(0);

    car.lvl2_clk_gate_ovrd
        .set(car.lvl2_clk_gate_ovrd.get() & 0xFFF7_FFFF);
}

pub fn enable_mc() {
    let car = &clock::Car::new();

    // Set EMC clock source.
    car.clk_source_emc
        .set((car.clk_source_emc.get() & 0x1FFF_FFFF) | 0x4000_0000);

    // Enable MIPI CAL clock.
    car.clk_enb_h_set
        .set((car.clk_enb_h_set.get() & 0xFDFF_FFFF) | 0x2000000);

    // Enable MC clock.
    car.clk_enb_h_set
        .set((car.clk_enb_h_set.get() & 0xFFFF_FFFE) | 1);

    // Enable EMC DLL clock.
    car.clk_enb_x_set
        .set((car.clk_enb_x_set.get() & 0xFFFF_BFFF) | 0x4000);

    // Clear EMC and MC reset.
    car.rst_dev_h_clr.set(0x2000001);
    usleep(5);

    disable_ahb_redirect();
}
